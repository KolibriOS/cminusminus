/* Этот файл сгенерирован программой 'FASTLIST.EXE' */

unsigned short idofs[53] = {0xFFFF, 0x0000, // A B
                            0x0009, 0xFFFF, // C D
                            0x0026, 0x0037, // E F
                            0x0044, 0xFFFF, // G H
                            0x004C, 0xFFFF, // I J
                            0xFFFF, 0x0052, // K L
                            0x005C, 0x0069, // M N
                            0x0093, 0x009F, // O P
                            0xFFFF, 0x00AB, // Q R
                            0x00B5, 0xFFFF, // S T
                            0xFFFF, 0xFFFF, // U V
                            0x00BF, 0xFFFF, // W X
                            0xFFFF, 0x00C8, // Y Z
                            0x00D4, 0x011A, //_ a
                            0x0121, 0x0130, // b c
                            0x014F, 0x0175, // d e
                            0x018B, 0x01A8, // f g
                            0xFFFF, 0x01B0, // h i
                            0xFFFF, 0xFFFF, // j k
                            0x01CE, 0xFFFF, // l m
                            0x01E4, 0xFFFF, // n o
                            0x01EB, 0x01F5, // p q
                            0x01FE, 0x0208, // r s
                            0xFFFF, 0x0242, // t u
                            0x0255, 0x025D, // v w
                            0xFFFF, 0xFFFF, // x y
                            0xFFFF};        // z

unsigned char id[] = {
    0x7A, 0x00, 0x52, 0x45, 0x41, 0x4B, 0, // BREAK
    0xFF, 0xFF,                            // end char 'B'
    0x6A, 0x00, 0x41, 0x52, 0x52, 0x59, 0x46, 0x4C, 0x41, 0x47, 0, // CARRYFLAG
    0xA3, 0x00, 0x41, 0x53, 0x45, 0,                               // CASE
    0x7C, 0x00, 0x4F, 0x4E, 0x54, 0x49, 0x4E, 0x55, 0x45, 0,       // CONTINUE
    0xFF, 0xFF,                                        // end char 'C'
    0x47, 0x00, 0x4C, 0x53, 0x45, 0,                   // ELSE
    0x4D, 0x00, 0x58, 0x54, 0x52, 0x41, 0x43, 0x54, 0, // EXTRACT
    0xFF, 0xFF,                                        // end char 'E'
    0x7F, 0x00, 0x4F, 0x52, 0,                         // FOR
    0x4C, 0x00, 0x52, 0x4F, 0x4D, 0,                   // FROM
    0xFF, 0xFF,                                        // end char 'F'
    0x78, 0x00, 0x4F, 0x54, 0x4F, 0,                   // GOTO
    0xFF, 0xFF,                                        // end char 'G'
    0x45, 0x00, 0x46, 0,                               // IF
    0xFF, 0xFF,                                        // end char 'I'
    0x9A, 0x00, 0x4F, 0x4F, 0x50, 0x4E, 0x5A, 0,       // LOOPNZ
    0xFF, 0xFF,                                        // end char 'L'
    0x70, 0x00, 0x49, 0x4E, 0x55, 0x53, 0x46, 0x4C, 0x41, 0x47, 0, // MINUSFLAG
    0xFF, 0xFF, // end char 'M'
    0x6B, 0x00, 0x4F, 0x54, 0x43, 0x41, 0x52, 0x52, 0x59, 0x46, 0x4C,
    0x41, 0x47, 0, // NOTCARRYFLAG
    0x69, 0x00, 0x4F, 0x54, 0x4F, 0x56, 0x45, 0x52, 0x46, 0x4C, 0x4F,
    0x57, 0, // NOTOVERFLOW
    0x6D, 0x00, 0x4F, 0x54, 0x5A, 0x45, 0x52, 0x4F, 0x46, 0x4C, 0x41,
    0x47, 0,                                                 // NOTZEROFLAG
    0xFF, 0xFF,                                              // end char 'N'
    0x68, 0x00, 0x56, 0x45, 0x52, 0x46, 0x4C, 0x4F, 0x57, 0, // OVERFLOW
    0xFF, 0xFF,                                              // end char 'O'
    0x71, 0x00, 0x4C, 0x55, 0x53, 0x46, 0x4C, 0x41, 0x47, 0, // PLUSFLAG
    0xFF, 0xFF,                                              // end char 'P'
    0x72, 0x00, 0x45, 0x54, 0x55, 0x52, 0x4E, 0,             // RETURN
    0xFF, 0xFF,                                              // end char 'R'
    0xA2, 0x00, 0x57, 0x49, 0x54, 0x43, 0x48, 0,             // SWITCH
    0xFF, 0xFF,                                              // end char 'S'
    0x7E, 0x00, 0x48, 0x49, 0x4C, 0x45, 0,                   // WHILE
    0xFF, 0xFF,                                              // end char 'W'
    0x6C, 0x00, 0x45, 0x52, 0x4F, 0x46, 0x4C, 0x41, 0x47, 0, // ZEROFLAG
    0xFF, 0xFF,                                              // end char 'Z'
    0x74, 0x00, 0x5F, 0x43, 0x4F, 0x44, 0x45, 0x50, 0x54, 0x52, 0x5F,
    0x5F, 0, // __CODEPTR__
    0x73, 0x00, 0x5F, 0x44, 0x41, 0x54, 0x41, 0x50, 0x54, 0x52, 0x5F,
    0x5F, 0,                                                 // __DATAPTR__
    0xA0, 0x00, 0x5F, 0x46, 0x49, 0x4C, 0x45, 0x5F, 0x5F, 0, // __FILE__
    0xA1, 0x00, 0x5F, 0x4C, 0x49, 0x4E, 0x45, 0x5F, 0x5F, 0, // __LINE__
    0x75, 0x00, 0x5F, 0x50, 0x4F, 0x53, 0x54, 0x50, 0x54, 0x52, 0x5F,
    0x5F, 0,                                                 // __POSTPTR__
    0x98, 0x00, 0x65, 0x78, 0x70, 0x6F, 0x72, 0x74, 0,       // _export
    0xFF, 0xFF,                                              // end char '_'
    0x81, 0x00, 0x73, 0x6D, 0,                               // asm
    0xFF, 0xFF,                                              // end char 'a'
    0x7B, 0x00, 0x72, 0x65, 0x61, 0x6B, 0,                   // break
    0x3C, 0x00, 0x79, 0x74, 0x65, 0,                         // byte
    0xFF, 0xFF,                                              // end char 'b'
    0x83, 0x00, 0x61, 0x73, 0x65, 0,                         // case
    0x94, 0x00, 0x64, 0x65, 0x63, 0x6C, 0,                   // cdecl
    0x3B, 0x00, 0x68, 0x61, 0x72, 0,                         // char
    0x7D, 0x00, 0x6F, 0x6E, 0x74, 0x69, 0x6E, 0x75, 0x65, 0, // continue
    0xFF, 0xFF,                                              // end char 'c'
    0x84, 0x00, 0x65, 0x66, 0x61, 0x75, 0x6C, 0x74, 0,       // default
    0xAC, 0x00, 0x65, 0x6C, 0x65, 0x74, 0x65, 0,             // delete
    0x49, 0x00, 0x6F, 0,                                     // do
    0x43, 0x00, 0x6F, 0x75, 0x62, 0x6C, 0x65, 0,             // double
    0x40, 0x00, 0x77, 0x6F, 0x72, 0x64, 0,                   // dword
    0xFF, 0xFF,                                              // end char 'd'
    0x46, 0x00, 0x6C, 0x73, 0x65, 0,                         // else
    0x50, 0x00, 0x6E, 0x75, 0x6D, 0,                         // enum
    0x91, 0x00, 0x78, 0x74, 0x65, 0x72, 0x6E, 0,             // extern
    0xFF, 0xFF,                                              // end char 'e'
    0x4F, 0x00, 0x61, 0x72, 0,                               // far
    0x96, 0x00, 0x61, 0x73, 0x74, 0x63, 0x61, 0x6C, 0x6C, 0, // fastcall
    0x41, 0x00, 0x6C, 0x6F, 0x61, 0x74, 0,                   // float
    0x80, 0x00, 0x6F, 0x72, 0,                               // for
    0xFF, 0xFF,                                              // end char 'f'
    0x79, 0x00, 0x6F, 0x74, 0x6F, 0,                         // goto
    0xFF, 0xFF,                                              // end char 'g'
    0x44, 0x00, 0x66, 0,                                     // if
    0x77, 0x00, 0x6E, 0x6C, 0x69, 0x6E, 0x65, 0,             // inline
    0x3D, 0x00, 0x6E, 0x74, 0,                               // int
    0x4E, 0x00, 0x6E, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0, // interrupt
    0xFF, 0xFF,                                              // end char 'i'
    0x3F, 0x00, 0x6F, 0x6E, 0x67, 0,                         // long
    0x48, 0x00, 0x6F, 0x6F, 0x70, 0,                         // loop
    0x9B, 0x00, 0x6F, 0x6F, 0x70, 0x6E, 0x7A, 0,             // loopnz
    0xFF, 0xFF,                                              // end char 'l'
    0xAB, 0x00, 0x65, 0x77, 0,                               // new
    0xFF, 0xFF,                                              // end char 'n'
    0x93, 0x00, 0x61, 0x73, 0x63, 0x61, 0x6C, 0,             // pascal
    0xFF, 0xFF,                                              // end char 'p'
    0x42, 0x00, 0x77, 0x6F, 0x72, 0x64, 0,                   // qword
    0xFF, 0xFF,                                              // end char 'q'
    0x4B, 0x00, 0x65, 0x74, 0x75, 0x72, 0x6E, 0,             // return
    0xFF, 0xFF,                                              // end char 'r'
    0x9D, 0x00, 0x68, 0x6F, 0x72, 0x74, 0,                   // short
    0x9F, 0x00, 0x69, 0x67, 0x6E, 0x65, 0x64, 0,             // signed
    0x8B, 0x00, 0x69, 0x7A, 0x65, 0x6F, 0x66, 0,             // sizeof
    0xA6, 0x00, 0x74, 0x61, 0x74, 0x69, 0x63, 0,             // static
    0x95, 0x00, 0x74, 0x64, 0x63, 0x61, 0x6C, 0x6C, 0,       // stdcall
    0x89, 0x00, 0x74, 0x72, 0x75, 0x63, 0x74, 0,             // struct
    0x82, 0x00, 0x77, 0x69, 0x74, 0x63, 0x68, 0,             // switch
    0xFF, 0xFF,                                              // end char 's'
    0x97, 0x00, 0x6E, 0x69, 0x6F, 0x6E, 0,                   // union
    0x9E, 0x00, 0x6E, 0x73, 0x69, 0x67, 0x6E, 0x65, 0x64, 0, // unsigned
    0xFF, 0xFF,                                              // end char 'u'
    0x3A, 0x00, 0x6F, 0x69, 0x64, 0,                         // void
    0xFF, 0xFF,                                              // end char 'v'
    0x4A, 0x00, 0x68, 0x69, 0x6C, 0x65, 0,                   // while
    0x3E, 0x00, 0x6F, 0x72, 0x64, 0,                         // word
    0xFF, 0xFF                                               // end char 'w'
};
